# This is a test file that tests the matrix_divided function

# Import the add_integer function from the module
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test if matrix is not list
>>> matrix = "denis"
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix(list of lists) of integers/floats

# Test if row in the matrix is not list
>>> matrix = [[1, 2, 3], [4, 5, 6], 6]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix(list of lists) of integers/floats

# Test if one element in a row is not integer/float
>>> matrix = [[1, 2, 'u'], [4, 5, 6], [7, 8, 9]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix(list of lists) of integers/floats

# Test all rows are of the same length
>>> matrix = [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size

# Test if div is a number
>>> matrix = [[1, 2, 3], [4, 5, 6], [8, 9, 10]]
>>> matrix_divided(matrix, "test")
Traceback (most recent call last):
	...
TypeError: div must be a number

# Test if div is zero
>>> matrix = [[1, 2, 3], [4, 5, 6], [8, 9, 10]]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero

# Test if everything works fine
>>> matrix = [[1.1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> matrix_divided(matrix, 3)
[[0.37, 0.67, 1.0], [1.33, 1.67, 2.0], [2.33, 2.67, 3.0]]
>>> print(matrix)
[[1.1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Test if div is not provided
>>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> matrix_divided(matrix)
Traceback (most recent call last):
	...
TypeError: matrix_divided() missing 1 required positional argument: 'div'


